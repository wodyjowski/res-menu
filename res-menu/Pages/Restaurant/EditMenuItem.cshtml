@page "{id:int}"
@model res_menu.Pages.Restaurant.EditMenuItemModel
@{
    ViewData["Title"] = "Edit Menu Item";
}

<div class="container">
    <h2>Edit Menu Item</h2>
    
    <div class="row">
        <div class="col-md-8">
            <form method="post" enctype="multipart/form-data">
                <input type="hidden" asp-for="MenuItem.Id" />
                <input type="hidden" asp-for="MenuItem.RestaurantId" />
                <input type="hidden" asp-for="MenuItem.ImageUrl" />
                
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                
                <div class="form-group mb-3">
                    <label asp-for="MenuItem.Name" class="form-label"></label>
                    <input asp-for="MenuItem.Name" class="form-control" />
                    <span asp-validation-for="MenuItem.Name" class="text-danger"></span>
                </div>
                
                <div class="form-group mb-3">
                    <label asp-for="MenuItem.Description" class="form-label"></label>
                    <textarea asp-for="MenuItem.Description" class="form-control" rows="3"></textarea>
                    <span asp-validation-for="MenuItem.Description" class="text-danger"></span>
                </div>
                
                <div class="form-group mb-3">
                    <label asp-for="MenuItem.Price" class="form-label"></label>
                    <input asp-for="MenuItem.Price" class="form-control" type="number" step="0.01" />
                    <span asp-validation-for="MenuItem.Price" class="text-danger"></span>
                </div>                <div class="form-group mb-3">
                    <label asp-for="MenuItem.Category" class="form-label"></label>
                    
                    @if (Model.ExistingCategories.Any())
                    {
                        <div class="mb-2">
                            <small class="text-muted">
                                <i class="bi bi-info-circle me-1"></i>
                                Existing categories: 
                                @foreach (var category in Model.ExistingCategories.Take(5))
                                {
                                    <span class="badge bg-secondary me-1">@category</span>
                                }
                                @if (Model.ExistingCategories.Count > 5)
                                {
                                    <span class="text-muted">and @(Model.ExistingCategories.Count - 5) more...</span>
                                }
                            </small>
                        </div>
                    }
                    
                    <div class="position-relative">
                        <input asp-for="MenuItem.Category" class="form-control category-input" 
                               placeholder="Type a category or select from existing ones" 
                               autocomplete="off" />
                        <div class="category-dropdown" style="display: none;">
                            <div class="dropdown-items"></div>
                        </div>
                    </div>
                    
                    <span asp-validation-for="MenuItem.Category" class="text-danger"></span>
                    <small class="form-text text-muted">
                        You can either select an existing category or type a new one
                    </small>
                </div>
                
                <div class="form-group mb-3">
                    <label asp-for="ImageFile" class="form-label">Item Image</label>
                    @if (!string.IsNullOrEmpty(Model.MenuItem.ImageUrl))
                    {
                        <div class="mb-2">
                            <img src="@Model.MenuItem.ImageUrl" alt="Current Image" class="img-thumbnail" style="max-height: 200px" />
                        </div>
                    }
                    <input type="file" asp-for="ImageFile" class="form-control" accept="image/*" />
                    <span asp-validation-for="ImageFile" class="text-danger"></span>
                    <small class="form-text text-muted">
                        Upload a new image to replace the current one (optional)
                    </small>
                </div>
                
                <div class="form-check mb-3">
                    <input asp-for="MenuItem.IsAvailable" class="form-check-input" />
                    <label asp-for="MenuItem.IsAvailable" class="form-check-label"></label>
                </div>
                
                <div class="mb-3">
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                    <a asp-page="./ManageMenu" class="btn btn-secondary">Cancel</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <style>
        .category-dropdown {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #ced4da;
            border-top: none;
            border-radius: 0 0 0.375rem 0.375rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            max-height: 200px;
            overflow-y: auto;
        }
        
        .dropdown-items {
            list-style: none;
            margin: 0;
            padding: 0;
        }
        
        .dropdown-item {
            padding: 8px 12px;
            cursor: pointer;
            border-bottom: 1px solid #f8f9fa;
        }
        
        .dropdown-item:hover,
        .dropdown-item.highlighted {
            background-color: #f8f9fa;
        }
        
        .dropdown-item:last-child {
            border-bottom: none;
        }
        
        .create-new-item {
            font-style: italic;
            color: #6c757d;
        }
        
        .create-new-item:hover {
            background-color: #e3f2fd;
            color: #1976d2;
        }
        
        [data-bs-theme="dark"] .category-dropdown {
            background: var(--bs-dark);
            border-color: var(--bs-border-color);
        }
        
        [data-bs-theme="dark"] .dropdown-item:hover,
        [data-bs-theme="dark"] .dropdown-item.highlighted {
            background-color: var(--bs-secondary);
        }
    </style>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const categoryInput = document.querySelector('.category-input');
            const dropdown = document.querySelector('.category-dropdown');
            const dropdownItems = document.querySelector('.dropdown-items');
            
            // Get existing categories from server
            const existingCategories = @Html.Raw(Json.Serialize(Model.ExistingCategories));
            
            let currentHighlightIndex = -1;
            
            function showDropdown() {
                dropdown.style.display = 'block';
            }
            
            function hideDropdown() {
                dropdown.style.display = 'none';
                currentHighlightIndex = -1;
            }
            
            function filterCategories(searchText) {
                const filtered = existingCategories.filter(category => 
                    category.toLowerCase().includes(searchText.toLowerCase())
                );
                
                dropdownItems.innerHTML = '';
                
                // Add filtered existing categories
                filtered.forEach((category, index) => {
                    const item = document.createElement('div');
                    item.className = 'dropdown-item';
                    item.textContent = category;
                    item.addEventListener('click', () => {
                        categoryInput.value = category;
                        hideDropdown();
                        categoryInput.focus();
                    });
                    dropdownItems.appendChild(item);
                });
                
                // Add "Create new" option if search text doesn't match exactly
                if (searchText && !existingCategories.some(cat => cat.toLowerCase() === searchText.toLowerCase())) {
                    const createItem = document.createElement('div');
                    createItem.className = 'dropdown-item create-new-item';
                    createItem.innerHTML = `<i class="bi bi-plus-circle me-2"></i>Create "${searchText}"`;
                    createItem.addEventListener('click', () => {
                        categoryInput.value = searchText;
                        hideDropdown();
                        categoryInput.focus();
                    });
                    dropdownItems.appendChild(createItem);
                }
                
                return dropdownItems.children.length > 0;
            }
            
            function highlightItem(index) {
                const items = dropdownItems.querySelectorAll('.dropdown-item');
                items.forEach(item => item.classList.remove('highlighted'));
                
                if (index >= 0 && index < items.length) {
                    items[index].classList.add('highlighted');
                    currentHighlightIndex = index;
                }
            }
            
            categoryInput.addEventListener('input', function() {
                const value = this.value.trim();
                
                if (value === '') {
                    hideDropdown();
                    return;
                }
                
                if (filterCategories(value)) {
                    showDropdown();
                    currentHighlightIndex = -1;
                } else {
                    hideDropdown();
                }
            });
            
            categoryInput.addEventListener('focus', function() {
                const value = this.value.trim();
                if (value && filterCategories(value)) {
                    showDropdown();
                }
            });
            
            categoryInput.addEventListener('keydown', function(e) {
                const items = dropdownItems.querySelectorAll('.dropdown-item');
                
                switch(e.key) {
                    case 'ArrowDown':
                        e.preventDefault();
                        if (dropdown.style.display === 'block') {
                            currentHighlightIndex = Math.min(currentHighlightIndex + 1, items.length - 1);
                            highlightItem(currentHighlightIndex);
                        }
                        break;
                        
                    case 'ArrowUp':
                        e.preventDefault();
                        if (dropdown.style.display === 'block') {
                            currentHighlightIndex = Math.max(currentHighlightIndex - 1, 0);
                            highlightItem(currentHighlightIndex);
                        }
                        break;
                        
                    case 'Enter':
                        if (dropdown.style.display === 'block' && currentHighlightIndex >= 0) {
                            e.preventDefault();
                            items[currentHighlightIndex].click();
                        }
                        break;
                        
                    case 'Escape':
                        hideDropdown();
                        break;
                }
            });
            
            // Hide dropdown when clicking outside
            document.addEventListener('click', function(e) {
                if (!categoryInput.contains(e.target) && !dropdown.contains(e.target)) {
                    hideDropdown();
                }
            });
        });
    </script>
}