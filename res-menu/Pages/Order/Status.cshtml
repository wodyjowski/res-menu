@page "/Order/Status/{customerOrderId?}"
@using res_menu.Models
@model res_menu.Pages.Order.StatusModel
@{
    ViewData["Title"] = "Order Status";
    Layout = "_Layout";
}

@section Styles {
    <style>
        /* Theme-aware styling for Order Status page */
        .card {
            background-color: var(--card-bg);
            border-color: var(--border);
            color: var(--text);
        }
        
        .table {
            background-color: var(--card-bg);
            color: var(--text);
        }
        
        .table td,
        .table th {
            border-color: var(--border);
            background-color: var(--card-bg);
        }
        
        .table thead th {
            background-color: var(--card-bg);
            color: var(--text);
        }
        
        .table tbody tr {
            background-color: var(--card-bg);
        }
        
        .table tfoot th {
            background-color: var(--card-bg);
            color: var(--text);
        }
        
        .progress {
            background-color: var(--border);
        }
        
        .alert {
            background-color: var(--card-bg);
            border-color: var(--border);
            color: var(--text);
        }
    </style>
}

<div class="container mt-4">
    @if (Model.Order == null)
    {
        <div class="alert alert-warning">
            <h4><i class="bi bi-exclamation-triangle me-2"></i>Order Not Found</h4>
            <p class="mb-0">We couldn't find your order. Please check your order confirmation link or contact the restaurant.</p>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-lg-8 mx-auto">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h4 class="mb-0"><i class="bi bi-receipt me-2"></i>Order Status</h4>
                        <span class="badge fs-6 @GetStatusBadgeClass(Model.Order.Status)">
                            @GetStatusText(Model.Order.Status)
                        </span>
                    </div>
                    <div class="card-body">
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h6 class="text-muted">Order Details</h6>
                                <p class="mb-1"><strong>Order ID:</strong> #@Model.Order.Id</p>
                                <p class="mb-1"><strong>Restaurant:</strong> @Model.Order.Restaurant?.Name</p>
                                <p class="mb-1"><strong>Date:</strong> @Model.Order.CreatedAt.ToString("dd/MM/yyyy HH:mm")</p>
                                @if (!string.IsNullOrEmpty(Model.Order.TableNumber))
                                {
                                    <p class="mb-1"><strong>Table:</strong> @Model.Order.TableNumber</p>
                                }
                            </div>
                            <div class="col-md-6">
                                <h6 class="text-muted">Customer Information</h6>
                                <p class="mb-1"><strong>Name:</strong> @Model.Order.CustomerName</p>
                                @if (!string.IsNullOrEmpty(Model.Order.CustomerPhone))
                                {
                                    <p class="mb-1"><strong>Phone:</strong> @Model.Order.CustomerPhone</p>
                                }
                                @if (!string.IsNullOrEmpty(Model.Order.CustomerEmail))
                                {
                                    <p class="mb-1"><strong>Email:</strong> @Model.Order.CustomerEmail</p>
                                }
                            </div>
                        </div>

                        <h6 class="text-muted">Order Items</h6>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Item</th>
                                        <th>Quantity</th>
                                        <th>Price</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.Order.OrderItems)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@item.MenuItem?.Name</strong>
                                                @if (!string.IsNullOrEmpty(item.SpecialInstructions))
                                                {
                                                    <br><small class="text-muted">Note: @item.SpecialInstructions</small>
                                                }
                                            </td>
                                            <td>@item.Quantity</td>
                                            <td>@item.UnitPrice.ToString("C", new System.Globalization.CultureInfo("pl-PL"))</td>
                                            <td>@item.TotalPrice.ToString("C", new System.Globalization.CultureInfo("pl-PL"))</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <th colspan="3">Total Amount</th>
                                        <th>@Model.Order.TotalAmount.ToString("C", new System.Globalization.CultureInfo("pl-PL"))</th>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>

                        @if (!string.IsNullOrEmpty(Model.Order.Notes))
                        {
                            <div class="mt-3">
                                <h6 class="text-muted">Special Notes</h6>
                                <p class="mb-0">@Model.Order.Notes</p>
                            </div>
                        }

                        <div class="mt-4">
                            <h6 class="text-muted">Order Status Timeline</h6>
                            <div class="progress mb-3" style="height: 25px;">
                                @{
                                    var progressPercentage = GetProgressPercentage(Model.Order.Status);
                                }
                                <div class="progress-bar @GetProgressBarClass(Model.Order.Status)" 
                                     role="progressbar" 
                                     style="width: @progressPercentage%" 
                                     aria-valuenow="@progressPercentage" 
                                     aria-valuemin="0" 
                                     aria-valuemax="100">
                                    @GetStatusText(Model.Order.Status)
                                </div>
                            </div>
                            
                            <div class="row text-center small">
                                <div class="col">
                                    <i class="bi bi-clock @(Model.Order.Status >= OrderStatus.Pending ? "text-success" : "text-muted")"></i>
                                    <br>Pending
                                </div>
                                <div class="col">
                                    <i class="bi bi-check-circle @(Model.Order.Status >= OrderStatus.Confirmed ? "text-success" : "text-muted")"></i>
                                    <br>Confirmed
                                </div>
                                <div class="col">
                                    <i class="bi bi-arrow-repeat @(Model.Order.Status >= OrderStatus.Preparing ? "text-success" : "text-muted")"></i>
                                    <br>Preparing
                                </div>
                                <div class="col">
                                    <i class="bi bi-check2-all @(Model.Order.Status >= OrderStatus.Ready ? "text-success" : "text-muted")"></i>
                                    <br>Ready
                                </div>
                                <div class="col">
                                    <i class="bi bi-truck @(Model.Order.Status >= OrderStatus.Delivered ? "text-success" : "text-muted")"></i>
                                    <br>Delivered
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="text-center mt-4">
                    <a href="javascript:window.location.reload();" class="btn btn-outline-primary">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh Status
                    </a>
                </div>
            </div>
        </div>
    }
</div>

@functions {
    private string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "bg-warning text-dark",
            OrderStatus.Confirmed => "bg-info",
            OrderStatus.Preparing => "bg-primary",
            OrderStatus.Ready => "bg-success",
            OrderStatus.Delivered => "bg-success",
            OrderStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetStatusText(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "Order Placed",
            OrderStatus.Confirmed => "Confirmed",
            OrderStatus.Preparing => "Preparing",
            OrderStatus.Ready => "Ready for Pickup",
            OrderStatus.Delivered => "Delivered",
            OrderStatus.Cancelled => "Cancelled",
            _ => "Unknown"
        };
    }

    private int GetProgressPercentage(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => 20,
            OrderStatus.Confirmed => 40,
            OrderStatus.Preparing => 60,
            OrderStatus.Ready => 80,
            OrderStatus.Delivered => 100,
            OrderStatus.Cancelled => 0,
            _ => 0
        };
    }

    private string GetProgressBarClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Cancelled => "bg-danger",
            OrderStatus.Delivered => "bg-success",
            _ => "bg-primary"
        };
    }
}
